---
apiVersion: v1
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: redis
    name: redis
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: docker.io/library/redis:latest
      from:
        kind: DockerImage
        name: docker.io/library/redis:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
kind: List
metadata: {}
---
apiVersion: v1
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: redis-fx
    name: redis-fx
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: redis-fx
    name: redis-fx
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: redis-fx:latest
    postCommit: {}
    resources: {}
    source:
      contextDir: redis
      git:
        uri: https://github.com/andesm/fx-system-trade.git
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: redis:latest
          namespace: flg
      type: Docker
    triggers:
    - github:
        secret: fftK_l5AQ1_hIamqQCdw
      type: GitHub
    - generic:
        secret: eP9LTjrOdKAYqHqCkOXO
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: redis-fx
    name: redis-fx
  spec:
    replicas: 1
    selector:
      app: redis-fx
      deploymentconfig: redis-fx
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: redis-fx
          deploymentconfig: redis-fx
      spec:
        serviceAccountName: useroot
        containers:
        - image: redis-fx:latest
          name: redis-fx
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          volumeMounts:
          - name: nfs-share
            mountPath: /data/db
            subPath: openshift/db/redis
          - name: redis-socket
            mountPath: /var/tmp/redis
        volumes:
        - name: nfs-share
          persistentVolumeClaim:
            claimName: flg-pvc
        - name: redis-socket
          hostPath:
            path: /var/tmp/redis
    test: false
    triggers:
    - type: ConfigChangeq
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis-fx
        from:
          kind: ImageStreamTag
          name: redis-fx:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: redis-fx
    name: redis-fx
  spec:
    ports:
    - name: 6379-tcp
      nodePort: 30379
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: redis-fx
      deploymentconfig: redis-fx
    type: NodePort
  status:
    loadBalancer: {}
kind: List
metadata: {}
---
apiVersion: v1
items:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade
    name: haskell
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: haskell
      from:
        kind: DockerImage
        name: haskell:latest
      generation: null
      importPolicy: {}
      name: "latest"
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade
    name: fx-system-trade
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade
    name: fx-system-trade
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: fx-system-trade:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: https://github.com/andesm/fx-system-trade.git
        #ref: "vec"
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: haskell:latest
      type: Docker
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade-backtest
    name: fx-system-trade-backtest
  spec:
    replicas: 1
    selector:
      app: fx-system-trade
      deploymentconfig: fx-system-trade
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: fx-system-trade
          deploymentconfig: fx-system-trade
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: fx-system-trade
          name: fx-system-trade
          #command: ["tail", "-f", "/etc/localtime"]
          command: ["stack", "exec", "--", "fx-exe", "backtest"]
          resources: {}
          volumeMounts:
          - name: localtime
            mountPath: /etc/localtime
          - name: redis-socket
            mountPath: /var/tmp/
        volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: redis-socket
          hostPath: 
            path: /var/tmp/
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - fx-system-trade
        from:
          kind: ImageStreamTag
          name: fx-system-trade:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade-trade-practice
    name: fx-system-trade-trade-practice
  spec:
    replicas: 1
    selector:
      app: fx-system-trade
      deploymentconfig: fx-system-trade
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: fx-system-trade
          deploymentconfig: fx-system-trade
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: fx-system-trade
          name: fx-system-trade
          #command: ["tail", "-f", "/etc/localtime"]
          command: ["stack", "exec", "--", "fx-exe", "trade-practice"]
          resources: {}
          env:
          - name: TRADE_PRACTICE_BEARER
            valueFrom:
              secretKeyRef:
                key: TRADE_PRACTICE_BEARER
                name: secret-for-fx-system-trade
          - name: TRADE_PRACTICE_URL
            valueFrom:
              secretKeyRef:
                key: TRADE_PRACTICE_URL
                name: secret-for-fx-system-trade
          volumeMounts:
          - name: localtime
            mountPath: /etc/localtime
          - name: redis-socket
            mountPath: /var/tmp/
        volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: redis-socket
          hostPath:
            path: /var/tmp/
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - fx-system-trade
        from:
          kind: ImageStreamTag
          name: fx-system-trade:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: fx-system-trade-trade-sim
    name: fx-system-trade-trade-sim
  spec:
    replicas: 1
    selector:
      app: fx-system-trade
      deploymentconfig: fx-system-trade
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: fx-system-trade
          deploymentconfig: fx-system-trade
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: fx-system-trade
          name: fx-system-trade
          #command: ["tail", "-f", "/etc/localtime"]
          command: ["stack", "exec", "--", "fx-exe", "trade-sim"]
          resources: {}
          volumeMounts:
          - name: localtime
            mountPath: /etc/localtime
          - name: redis-socket
            mountPath: /var/tmp/
        volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: redis-socket
          hostPath:
            path: /var/tmp/
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - fx-system-trade
        from:
          kind: ImageStreamTag
          name: fx-system-trade:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
kind: List
metadata: {}
---
apiVersion: v1
items:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: mongo
    name: mongo
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: docker.io/library/mongo:latest
      from:
        kind: DockerImage
        name: docker.io/library/mongo:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: mongo
    name: mongo
  spec:
    replicas: 1
    selector:
      app: mongo
      deploymentconfig: mongo
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: mongo
          deploymentconfig: mongo
      spec:
        containers:
        - image: mongo
          name: mongo
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          volumeMounts:
          - name: nfs-share
            mountPath: /data/db
            subPath: openshift/db/mongo
        volumes:
        - name: nfs-share
          persistentVolumeClaim:
            claimName: flg-pvc
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongo
        from:
          kind: ImageStreamTag
          name: mongo:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: mongo
    name: mongo
  spec:
    ports:
    - name: 27017-tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      app: mongo
      deploymentconfig: mongo
  status:
    loadBalancer: {}
kind: List
metadata: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: '2018-07-14T20:34:03Z'
  labels:
    app: mongo
  name: mongo-nodeport
  namespace: flg
  resourceVersion: '328368'
  selfLink: /api/v1/namespaces/flg/services/mongo-nodeport
  uid: 3f32bd68-87a5-11e8-a003-000c29e709e7
spec:
  clusterIP: 172.30.227.30
  externalTrafficPolicy: Cluster
  ports:
    - name: 27017-tcp
      nodePort: 30017
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: mongo
    deploymentconfig: mongo
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: v1
items:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate
    name: python
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: python
      from:
        kind: DockerImage
        name: python:latest
      generation: null
      importPolicy: {}
      name: "latest"
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate
    name: get-rate
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate
    name: get-rate
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: get-rate:latest
    postCommit: {}
    resources: {}
    source:
      contextDir: get_rate
      git:
        uri: https://github.com/andesm/fx-system-trade.git
        #ref: "opt"
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: python:latest
      type: Docker
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate
    name: get-rate
  spec:
    replicas: 1
    selector:
      app: get-rate
      deploymentconfig: get-rate
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: get-rate
          deploymentconfig: get-rate
      spec:
        containers:
        - image: get-rate:latest
          name: get-rate
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - get-rate
        from:
          kind: ImageStreamTag
          name: get-rate:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
kind: List
metadata: {}
---
apiVersion: v1
items:
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate-data
    name: get-rate-data
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate-data
    name: get-rate-data
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: get-rate-data:latest
    postCommit: {}
    resources: {}
    source:
      contextDir: get_rate_data
      git:
        uri: https://github.com/andesm/fx-system-trade.git
        #ref: "opt"
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: python:latest
          namespace: flg
      type: Docker
    triggers:
    - github:
        secret: M4_V_EVT61Fn_tq55AEx
      type: GitHub
    - generic:
        secret: scMbnfs6X3m4Rcngw29X
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: get-rate-data
    name: get-rate-data
  spec:
    schedule: "0 0 * * 0"  
    jobTemplate:
      spec:
        template:        
          metadata:
            annotations:
              openshift.io/generated-by: OpenShiftNewApp
            creationTimestamp: null
            labels:
              parrent: get-rate-data
          spec:    
            containers:
            - image: docker-registry.default.svc:5000/flg/get-rate-data:latest
              name: get-rate-data
              namespace: flg
              resources: {}
              volumeMounts:
              - name: nfs-share
                mountPath: /get_rate_data
                subPath: home/andesm/dev/fx-system-trade/get_rate_data
            volumes:
            - name: nfs-share
              persistentVolumeClaim:
                claimName: flg-pvc
            restartPolicy: OnFailure 
kind: List
metadata: {}
